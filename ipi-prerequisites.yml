---
- name: Check prerequisites for an OCP IPI installation on Nutanix
  hosts: localhost
  gather_facts: false
  collections:
    - nutanix.ncp
  vars_files:
    - secret.yml
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: "{{ nutanix_central_host }}"
      nutanix_username: "{{ nutanix_username }}"
      nutanix_password: "{{ nutanix_password }}"
      validate_certs: true

  tasks:
    - name: Ensure ccoctl is correctly installed in the host machine
      block:
        - name: Checking if ccoctl utility is installed
          stat:
            path: "/usr/bin/ccoctl"
          register: ccoctl_check
        - name: Print informative message if ccoctl utility is not found or not executable
          fail:
            msg: "ccoctl utility does not exist or is not executable. Please install and configure it appropriately.
                  https://docs.openshift.com/container-platform/4.13/installing/installing_nutanix/preparing-to-install-on-nutanix.html#cco-ccoctl-configuring_preparing-to-install-on-nutanix"
          when: not (ccoctl_check.stat.exists and ccoctl_check.stat.executable)

    - name: Ensure port 9440 of Prism Central and Prism Element are open
      wait_for:
        host: "{{ item }}"
        port: 9440
        state: started
        delay: 0
        timeout: 3
      loop:
        - "{{ nutanix_central_host }}"
        - "{{ nutanix_element_host }}"

    - name: Ensure SSL certificate is valid
      uri:
        url: "https://{{ nutanix_central_host }}:9440"
        validate_certs: true

    - name: Ensure account has enough permissions
      block:
        - name: Ensure account has enough permissions - get user informations
          uri:
            url: "https://{{ nutanix_central_host }}:9440/api/nutanix/v3/users/me"
            return_content: true
            force_basic_auth: true
            user: "{{ nutanix_username }}"
            password: "{{ nutanix_password }}"
          register: user_informations

        - name: Ensure account has enough permissions - get user ACPs
          uri:
            url: "https://{{ nutanix_central_host }}:9440/api/nutanix/v3/access_control_policies/{{ item.uuid }}"
            return_content: true
            force_basic_auth: true
            user: "{{ nutanix_username }}"
            password: "{{ nutanix_password }}"
          loop: "{{ user_informations.json.status.resources.access_control_policy_reference_list }}"
          register: user_acps

        - name: Ensure account has enough permissions - get user roles
          uri:
            url: "https://{{ nutanix_central_host }}:9440/api/nutanix/v3/roles/{{ item.json.status.resources.role_reference.uuid }}"
            return_content: true
            force_basic_auth: true
            user: "{{ nutanix_username }}"
            password: "{{ nutanix_password }}"
          loop: "{{ user_acps.results }}"
          loop_control:
            label: "{{ item.json.status.resources.role_reference }}"
          register: user_roles

        - name: Ensure account has enough permissions - fail if not satisfied
          fail:
            msg: The provided account has not meet the permissions requirement. It must have access to CRUD operations on VMs, categories and images.
          when: >
           not(
             'View_Virtual_Machine' in user_permissions and
             'Create_Virtual_Machine' in user_permissions and
             'Update_Virtual_Machine' in user_permissions and
             'Delete_Virtual_Machine' in user_permissions and

             'View_Image' in user_permissions and
             'Create_Image' in user_permissions and
             'Update_Image' in user_permissions and
             'Delete_Image' in user_permissions and

             'View_Category_Mapping' in user_permissions and
             'Create_Category_Mapping' in user_permissions and
             'Update_Category_Mapping' in user_permissions and
             'Delete_Category_Mapping' in user_permissions and

             'View_Value_Category' in user_permissions and
             'Create_Or_Update_Value_Category' in user_permissions and
             'Delete_Value_Category' in user_permissions
           )
          vars:
            user_permissions: "{{ user_roles.results|map(attribute='json.status.resources.permission_reference_list')|list|first|unique|map(attribute='name')}}"


    - name: Ensure Prism Central version is compatible
      debug:
        msg: >
          As of summer 2023, there is no automatic way to retrieve the Prism Central version.
          Please check that the Prism Central meets the minimum version 2022.4.

    - name: Ensure {{ nutanix_cluster }} AOS version is compatible
      block:
        - name: Ensure {{ nutanix_cluster }} AOS version is compatible - get all clusters
          ntnx_clusters_info:
          register: clusters

        - name: Ensure {{ nutanix_cluster }} AOS version is compatible - retrieve {{ nutanix_cluster }} from all clusters
          set_fact:
            cluster: "{{clusters.response.entities|map(attribute='status')|selectattr('name', 'equalto', nutanix_cluster)|first}}"

        - name: Ensure {{ nutanix_cluster }} AOS version is compatible - fail if not satisfied
          fail:
            msg: The cluster {{ nutanix_cluster }} version is not compatible. Please update it to version 6.5.1+
          when: cluster.resources.config.software_map.NOS.version is version('6.5.1', '<')

#    - name: Ensure cluster has enough storage capacity
#
    - name: Ensure the presence of DNS records
      command: dig +short example.com
      register: dns_record
      failed_when: dns_record.stdout == ''
      changed_when: false
      loop:
        - api.{{ ocp_cluster_name }}.{{ ocp_base_domain }}
        - test.apps.{{ ocp_cluster_name }}.{{ ocp_base_domain }}
